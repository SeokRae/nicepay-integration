jacoco {
    toolVersion = "0.8.7"
}

def jacocoExclude = []

jacocoTestReport {
    reports {
        xml.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        }))
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        }))
    }

    violationRules {
        /* 전체 프로젝트의 최소 커버리지 */
        rule {
            limit {
                minimum = 0.7
            }
        }

        /* 특정 패키지의 최소 커버리지 */
        rule {
            element = 'PACKAGE'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.3

            }
        }

        rule {
            enabled = true
            /* 룰을 체크할 단위는 클래스 단위 */
            element = 'CLASS'
            // includes = []

            /* 라인 커버리지 제한을 80%로 설정 */
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.3
            }

            /* 브랜치 커버리지 제한을 80%로 설정 */
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.1
            }

            /* 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한합니다. */
            limit {
                counter = 'INSTRUCTION'
                value = 'TOTALCOUNT'
                maximum = 250
            }

            //excludes = []
        }
    }
}